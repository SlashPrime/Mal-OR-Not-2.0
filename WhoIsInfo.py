import requests
import json
import whois
from fpdf import FPDF 
import datetime;

typeid='domain'
inp= input("Enter Domain: ")
w = whois.whois(inp)

with open("usernamelocation.txt","r") as n:
    m=n.readlines()
username=m[0].strip()
location=m[1]

def makepdf(x,y,resultfromtxt):
    class PDF(FPDF):
        def header(self):
            self.image('pdfbgi.png', 0, 0, 210)
            self.set_font('Arial', 'B', 30)
            self.cell(80)
            self.cell(30, 30, 'Mal-Or-Not', 0, 1, 'C')
            self.set_font('Arial', 'U', 25)
            if(y=='ip' or y=='url'):
                self.cell(190, 10, y.upper()+' Report', 0, 1, 'C')
            else:
                self.cell(190, 10, y.capitalize()+' Report', 0, 1, 'C')
            self.ln(20)

        def footer(self):
            self.set_y(-20)
            self.set_font('Arial', 'I', 8)
            self.cell(0, 5, "Report generated at: "+txs, 0, 1, 'L')
            self.cell(0, 5, "Report generated by: "+username, 0, 1, 'L')
            self.cell(0, 5, "Location: "+location, 0, 0, 'L')
            self.cell(0, 5, 'Page ' + str(self.page_no()) + '/{nb}', 0, 1, 'R')
            self.set_text_color(127, 127, 127)
            self.cell(0, 5, "Â© 2022 Mal-Or-Not, All rights reserved.", 0, 0, 'C')

    pdf = PDF()
    pdf.alias_nb_pages()
    name="reports/domain/"+inp+".pdf"

    ct=datetime.datetime.now().isoformat(' ', 'seconds')
    txs=str(ct)

    pdf.add_page()
    pdf.set_font("Arial", 'B', size = 15) 
    file = open("output/"+y+"/"+x+"."+y+".report", "r") 
    for g in file:
            pdf.multi_cell(0, 10, txt = g, border=1, align = 'L') 

    pdf.output(name)

response = requests.get("https://ipqualityscore.com/api/json/url/52euadgGvFpxYkflxorqnBTwGY8mEwMi/"+inp)
domainscorecheck=json.loads(response.text)

with open ("output/domain/"+inp+".domain.report", 'w') as fo:
    for k, v in w.items():
        if k != 'status' and k != 'whois_server' and k != 'referral_url' and k != 'name_servers' and k != 'emails' and k != 'dnssec' and k != 'name' and k != 'org' and k != 'address' and k != 'city' and k != 'state' and k != 'zipcode':
            fo.write(str(k).capitalize().replace("_", " ")+": ")
            if (v !=None):
                if (type(v) is list):
                    dlen=len(v)
                    for j in range(0,dlen):
                        fo.write(str(v[j]) + '\n')
                        if j != (dlen-1):
                            fo.write('-\t')

                else:
                    fo.write(str(v) + '\n')
            else:
                fo.write('Not listed \n')
    for p,q in domainscorecheck.items():
        if p != 'domain_age' and p != 'message' and p != 'success' and p != 'domain' and p != 'content_type' and p != 'page_size' and p != 'dns_valid' and p != 'parking' and p != 'request_id':
            fo.write(str(p).capitalize().replace("_", " ")+": ")
            if (domainscorecheck[p]!=None):
                    if (type(q) is list):
                        checklen=len(q)
                        for r in range(0,checklen):
                            fo.write(str(q[r]) + '\n')
                            if r != (checklen-1):
                                fo.write('-\t')
                    else:
                        fo.write(str(q) + '\n')
            else:
                fo.write('Not listed \n')

currentdomain=open("output/domain/"+inp+".domain.report", 'r')
readcurrent=currentdomain.read()
makepdf(inp,typeid,readcurrent)
print ('RESULT BEGINS HERE'.center(100,'-'))
print (readcurrent)
print ('RESULT ENDS HERE'.center(100,'-'))
currentdomain.close()

maindomainfile=open("output/domain/"+"domain.master.report","a")
maindomainfile.write(readcurrent)
maindomainfile.close()
